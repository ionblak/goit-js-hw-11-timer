{"version":3,"sources":["webpack:///./index.js","webpack:///./js/timer.js"],"names":["refs","days","document","querySelector","hours","mins","secs","selector","targetDate","this","getTime","start","timerId","setInterval","startTime","Date","now","deltaTime","clearInterval","time","getTimeComponents","updateClockface","Math","floor","textContent"],"mappings":"kHAAA,4B,mBCAA,IAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,2BAC7BC,MAAOF,SAASC,cAAc,4BAC9BE,KAAMH,SAASC,cAAc,2BAC7BG,KAAMJ,SAASC,cAAc,4BAyCjB,I,WArCZ,cAAsC,IAAxBI,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACtBC,KAAKF,SAAWL,SAASC,cAAcI,GACvCE,KAAKD,WAAaA,EAAWE,U,2BAG/BC,MAAA,WAAQ,WACAC,EAAUC,aAAY,WAC1B,IAAMC,EAAYC,KAAKC,MACjBC,EAAY,EAAKT,WAAaM,EAEpC,GAAIG,GAAa,EACfC,cAAcN,OADhB,CAKA,IAAMO,EAAO,EAAKC,kBAAkBH,GACpC,EAAKI,gBAAgBF,MACpB,M,EAGLC,kBAAA,SAAkBD,GAMhB,MAAO,CAAElB,KALIqB,KAAKC,MAAMJ,EAAO,OAKhBf,MAJDkB,KAAKC,MAAOJ,EAAO,MAAR,MAIHd,KAHTiB,KAAKC,MAAOJ,EAAO,KAAR,KAGIb,KAFfgB,KAAKC,MAAOJ,EAAO,IAAe,O,EAKjDE,gBAAA,YAA6C,IAA3BpB,EAA2B,EAA3BA,KAAMG,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACnCN,EAAKC,KAAKuB,YAAcvB,EACxBD,EAAKI,MAAMoB,YAAcpB,EACzBJ,EAAKK,KAAKmB,YAAcnB,EACxBL,EAAKM,KAAKkB,YAAclB,G,KAId,CAAmB,CAC/BC,SAAU,WACVC,WAAY,IAAIO,KAAK,kBAEjBJ,U","file":"main.cf602866a1dc116639d5.js","sourcesContent":["import './styles.css';\nimport './js/timer';\n","const refs = {\r\n  days: document.querySelector('span[data-value=\"days\"]'),\r\n  hours: document.querySelector('span[data-value=\"hours\"]'),\r\n  mins: document.querySelector('span[data-value=\"mins\"]'),\r\n  secs: document.querySelector('span[data-value=\"secs\"]'),\r\n};\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this.selector = document.querySelector(selector);\r\n    this.targetDate = targetDate.getTime();\r\n  }\r\n\r\n  start() {\r\n    const timerId = setInterval(() => {\r\n      const startTime = Date.now();\r\n      const deltaTime = this.targetDate - startTime;\r\n\r\n      if (deltaTime >= 0) {\r\n        clearInterval(timerId);\r\n        return;\r\n      }\r\n\r\n      const time = this.getTimeComponents(deltaTime);\r\n      this.updateClockface(time);\r\n    }, 1000);\r\n  }\r\n\r\n  getTimeComponents(time) {\r\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n    const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\n    return { days, hours, mins, secs };\r\n  }\r\n\r\n  updateClockface({ days, hours, mins, secs }) {\r\n    refs.days.textContent = days;\r\n    refs.hours.textContent = hours;\r\n    refs.mins.textContent = mins;\r\n    refs.secs.textContent = secs;\r\n  }\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jul 17, 2021'),\r\n});\r\ntimer.start();\r\n"],"sourceRoot":""}