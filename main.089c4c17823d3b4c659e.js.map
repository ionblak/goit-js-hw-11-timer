{"version":3,"sources":["webpack:///./index.js","webpack:///./js/timer.js"],"names":["refs","days","document","querySelector","hours","mins","secs","selector","targetDate","this","start","startTime","Date","now","deltaTime","getTime","updateClockface","getTimeComponents","startSetInterval","timerId","setInterval","time","stopTimer","clearInterval","textContent","Math","floor"],"mappings":"kHAAA,4B,mBCAA,IAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,2BAC7BC,MAAOF,SAASC,cAAc,4BAC9BE,KAAMH,SAASC,cAAc,2BAC7BG,KAAMJ,SAASC,cAAc,4BAoDjB,I,WAhDZ,cAAsC,IAAxBI,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACtBC,KAAKF,SAAWA,EAChBE,KAAKD,WAAaA,E,2BAGpBE,MAAA,WACE,IAAMC,EAAYC,KAAKC,MACnBC,EAAYL,KAAKD,WAAWO,UAAYJ,EAC5CF,KAAKO,gBAAgBP,KAAKQ,kBAAkBH,IAE5CL,KAAKS,iBAAiBJ,I,EAGxBI,iBAAA,SAAiBJ,GAAW,WACpBK,EAAUC,aAAY,WAC1BN,GAAa,IACb,IAAMO,EAAO,EAAKJ,kBAAkBH,GACpC,EAAKE,gBAAgBK,KACpB,KAEHZ,KAAKa,UAAUR,EAAWK,I,EAE5BG,UAAA,SAAUR,EAAWK,GACfL,GAAa,IACfS,cAAcJ,GACdV,KAAKO,gBAAgB,GACFd,SAASC,cAAcM,KAAKF,UACpCiB,YAAc,qB,EAI7BP,kBAAA,SAAkBI,GAMhB,MAAO,CAAEpB,KALIwB,KAAKC,MAAML,EAAO,OAKhBjB,MAJDqB,KAAKC,MAAOL,EAAO,MAAR,MAIHhB,KAHToB,KAAKC,MAAOL,EAAO,KAAR,KAGIf,KAFfmB,KAAKC,MAAOL,EAAO,IAAe,O,EAKjDL,gBAAA,YAA6C,IAA3Bf,EAA2B,EAA3BA,KAAMG,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACnCN,EAAKC,KAAKuB,YAAcvB,EACxBD,EAAKI,MAAMoB,YAAcpB,EACzBJ,EAAKK,KAAKmB,YAAcnB,EACxBL,EAAKM,KAAKkB,YAAclB,G,KAId,CAAmB,CAC/BC,SAAU,WACVC,WAAY,IAAII,KAAK,kBAEjBF,U","file":"main.089c4c17823d3b4c659e.js","sourcesContent":["import './styles.css';\nimport './js/timer';\n","const refs = {\r\n  days: document.querySelector('span[data-value=\"days\"]'),\r\n  hours: document.querySelector('span[data-value=\"hours\"]'),\r\n  mins: document.querySelector('span[data-value=\"mins\"]'),\r\n  secs: document.querySelector('span[data-value=\"secs\"]'),\r\n};\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n  }\r\n\r\n  start() {\r\n    const startTime = Date.now();\r\n    let deltaTime = this.targetDate.getTime() - startTime;\r\n    this.updateClockface(this.getTimeComponents(deltaTime));\r\n\r\n    this.startSetInterval(deltaTime);\r\n  }\r\n\r\n  startSetInterval(deltaTime) {\r\n    const timerId = setInterval(() => {\r\n      deltaTime -= 1000;\r\n      const time = this.getTimeComponents(deltaTime);\r\n      this.updateClockface(time);\r\n    }, 1000);\r\n\r\n    this.stopTimer(deltaTime, timerId);\r\n  }\r\n  stopTimer(deltaTime, timerId) {\r\n    if (deltaTime <= 0) {\r\n      clearInterval(timerId);\r\n      this.updateClockface(0);\r\n      const blockTimer = document.querySelector(this.selector);\r\n      blockTimer.textContent = 'Happy new year!!';\r\n    }\r\n  }\r\n\r\n  getTimeComponents(time) {\r\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n    const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\n    return { days, hours, mins, secs };\r\n  }\r\n\r\n  updateClockface({ days, hours, mins, secs }) {\r\n    refs.days.textContent = days;\r\n    refs.hours.textContent = hours;\r\n    refs.mins.textContent = mins;\r\n    refs.secs.textContent = secs;\r\n  }\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Dec 31, 2020'),\r\n});\r\ntimer.start();\r\n"],"sourceRoot":""}