{"version":3,"sources":["webpack:///./index.js","webpack:///./js/timer.js"],"names":["refs","days","document","querySelector","hours","mins","secs","selector","targetDate","this","start","startTime","Date","now","deltaTime","getTime","initTimer","updateClockface","getTimeComponents","startSetInterval","timerId","setInterval","time","stopTimer","clearInterval","textContent","Math","floor"],"mappings":"kHAAA,4B,mBCAA,IAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,2BAC7BC,MAAOF,SAASC,cAAc,4BAC9BE,KAAMH,SAASC,cAAc,2BAC7BG,KAAMJ,SAASC,cAAc,4BA2DjB,I,WAvDZ,cAAsC,IAAxBI,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACtBC,KAAKF,SAAWA,EAChBE,KAAKD,WAAaA,EAElBC,KAAKC,Q,2BAGPA,MAAA,WACE,IAAMC,EAAYC,KAAKC,MACnBC,EAAYL,KAAKD,WAAWO,UAAYJ,EAExCG,GAAa,GACfL,KAAKO,YAEPP,KAAKQ,gBAAgBR,KAAKS,kBAAkBJ,IAC5CL,KAAKU,iBAAiBL,I,EAGxBK,iBAAA,SAAiBL,GAAW,WACpBM,EAAUC,aAAY,WAC1BP,GAAa,IACb,IAAMQ,EAAO,EAAKJ,kBAAkBJ,GACpC,EAAKG,gBAAgBK,GACrB,EAAKC,UAAUT,EAAWM,KACzB,M,EAELG,UAAA,SAAUT,EAAWM,GACfN,GAAa,IACfU,cAAcJ,GACdX,KAAKO,c,EAGTA,UAAA,WACEP,KAAKQ,gBAAgB,GACFf,SAASC,cAAcM,KAAKF,UACpCkB,YAAc,oB,EAG3BP,kBAAA,SAAkBI,GAMhB,MAAO,CAAErB,KALIyB,KAAKC,MAAML,EAAO,OAKhBlB,MAJDsB,KAAKC,MAAOL,EAAO,MAAR,MAIHjB,KAHTqB,KAAKC,MAAOL,EAAO,KAAR,KAGIhB,KAFfoB,KAAKC,MAAOL,EAAO,IAAe,O,EAKjDL,gBAAA,YAA6C,IAA3BhB,EAA2B,EAA3BA,KAAMG,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACnCN,EAAKC,KAAKwB,YAAcxB,EACxBD,EAAKI,MAAMqB,YAAcrB,EACzBJ,EAAKK,KAAKoB,YAAcpB,EACxBL,EAAKM,KAAKmB,YAAcnB,G,KAId,CAAmB,CAC/BC,SAAU,WACVC,WAAY,IAAII,KAAK,mB","file":"main.e04d17c5830d07c79ef7.js","sourcesContent":["import './styles.css';\nimport './js/timer';\n","const refs = {\r\n  days: document.querySelector('span[data-value=\"days\"]'),\r\n  hours: document.querySelector('span[data-value=\"hours\"]'),\r\n  mins: document.querySelector('span[data-value=\"mins\"]'),\r\n  secs: document.querySelector('span[data-value=\"secs\"]'),\r\n};\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n\r\n    this.start();\r\n  }\r\n\r\n  start() {\r\n    const startTime = Date.now();\r\n    let deltaTime = this.targetDate.getTime() - startTime;\r\n\r\n    if (deltaTime <= 0) {\r\n      this.initTimer();\r\n    }\r\n    this.updateClockface(this.getTimeComponents(deltaTime));\r\n    this.startSetInterval(deltaTime);\r\n  }\r\n\r\n  startSetInterval(deltaTime) {\r\n    const timerId = setInterval(() => {\r\n      deltaTime -= 1000;\r\n      const time = this.getTimeComponents(deltaTime);\r\n      this.updateClockface(time);\r\n      this.stopTimer(deltaTime, timerId);\r\n    }, 1000);\r\n  }\r\n  stopTimer(deltaTime, timerId) {\r\n    if (deltaTime <= 0) {\r\n      clearInterval(timerId);\r\n      this.initTimer();\r\n    }\r\n  }\r\n  initTimer() {\r\n    this.updateClockface(0);\r\n    const blockTimer = document.querySelector(this.selector);\r\n    blockTimer.textContent = 'Happy new year!!';\r\n  }\r\n\r\n  getTimeComponents(time) {\r\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n    const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\n    return { days, hours, mins, secs };\r\n  }\r\n\r\n  updateClockface({ days, hours, mins, secs }) {\r\n    refs.days.textContent = days;\r\n    refs.hours.textContent = hours;\r\n    refs.mins.textContent = mins;\r\n    refs.secs.textContent = secs;\r\n  }\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Dec 31 2020'), //2020,10,28,15,56  Dec 31 2020\r\n});\r\n"],"sourceRoot":""}